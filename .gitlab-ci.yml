# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

variables:
  GIT_CLEAN_FLAGS: none

run-setup:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - echo "Preparing dependencies..."
    - echo "$ENV" > .env
    - echo "$GIT_MODULES" > .gitmodules
    - echo "$MODULE_CONFIG" > src/modules/Module.ts
    - echo "$STORE_CONFIG" > src/modules/Store.ts
    - echo "Dependency complete."

pull-modules:
  image: bitnami/git:latest
  stage: build
  # variables:
  #   GIT_SUBMODULE_STRATEGY: recursive
  before_script:
    - rm -rf src/modules/pais-template
    - rm -rf src/modules/orderpub
    - rm -rf src/modules/mpis
  script:
    - echo "Installing git..."
    - git --version
    - echo "Git installed."
    - git clone -b master http://gitlab-ci-token:$CI_JOB_TOKEN@10.50.6.154:8001/pahrmis/core/pais-template.git src/modules/pais-template
    - git clone -b develop http://gitlab-ci-token:$CI_JOB_TOKEN@10.50.6.154:8001/pahrmis/frontend/papis.git src/modules/mpis
    - git clone -b develop http://gitlab-ci-token:$CI_JOB_TOKEN@10.50.6.154:8001/pahrmis/frontend/opis.git src/modules/orderpub

build-job:
  stage: build
  tags:
    - shell
  needs: ['pull-modules']
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apk add --update openssh )' 
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan 10.50.6.155 >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - find src/modules
    - ssh -o StrictHostKeyChecking=no runner@10.50.6.155 "
      mkdir -p ~/app/deploy/pahrmis"
    - rsync -av --delete . runner@10.50.6.155:~/app/deploy/pahrmis
    - ssh -o StrictHostKeyChecking=no runner@10.50.6.155 "
      cd ~/app/deploy/pahrmis && npm install && npm run serve"
    # - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password=stdin
    # - docker build -t pahrmis/app .
    # - docker run -d -p 8080:8080 my-app

# build-job:       # This job runs in the build stage, which runs first.
#   image: node:lts
#   stage: build
#   script:
#     - echo "Compiling the code..."
#     - npm install
#     - npm run serve
#     - echo "Compile complete."

# unit-test-job:   # This job runs in the test stage.
#   stage: test    # It only starts when the job in the build stage completes successfully.
#   script:
#     - echo "Running unit tests... This will take about 60 seconds."
#     - sleep 60
#     - echo "Code coverage is 90%"

# lint-test-job:   # This job also runs in the test stage.
#   stage: test    # It can run at the same time as unit-test-job (in parallel).
#   script:
#     - echo "Linting code... This will take about 10 seconds."
#     - sleep 10
#     - echo "No lint issues found."

# deploy-job:      # This job runs in the deploy stage.
#   stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
#   environment: production
#   script:
#     - echo "Deploying application..."
#     - echo "Application successfully deployed."
